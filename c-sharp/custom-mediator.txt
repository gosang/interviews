This custom Mediator implementation provides several key advantages for .NET 8 CQRS applications:
Key Features
High Performance:

Uses ConcurrentDictionary for caching compiled handlers to avoid reflection overhead on subsequent calls
Minimal allocations with pre-compiled delegates
Efficient parallel notification handling with Task.WhenAll

CQRS Support:

Commands: Use IRequest<TResponse> for operations that return data, or IRequest for void operations
Queries: Use IRequest<TResponse> to return DTOs or domain objects
Events: Use INotification for publishing domain events to multiple handlers

Lightweight:

No external dependencies beyond .NET 8 base libraries
Simple, focused API surface
Minimal memory footprint

Features:

Automatic handler registration via assembly scanning
Support for multiple notification handlers per event
Proper cancellation token support throughout
Type-safe request/response patterns

Performance Optimizations

Handler Caching: First-time reflection cost is paid once, then cached delegates are reused
Parallel Notifications: Multiple notification handlers run concurrently
Minimal Boxing: Generic constraints minimize object boxing/unboxing
Direct Service Provider Access: Bypasses unnecessary middleware layers

Usage in .NET 8 API
Register in Program.cs:
csharpbuilder.Services.AddCustomMediator(typeof(Program).Assembly);
The mediator automatically discovers and registers all handlers in the specified assemblies, making it easy to maintain as your application grows. The implementation follows CQRS principles while providing the performance characteristics needed for high-throughput APIs.


----

using System.Collections.Concurrent;
using System.Reflection;
using Microsoft.Extensions.DependencyInjection;

namespace CustomMediator;

// Core interfaces
public interface IRequest<out TResponse> { }
public interface IRequest : IRequest<Unit> { }
public interface IRequestHandler<in TRequest, TResponse> where TRequest : IRequest<TResponse>
{
    Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
}
public interface IRequestHandler<in TRequest> : IRequestHandler<TRequest, Unit> where TRequest : IRequest<Unit> { }

public interface INotification { }
public interface INotificationHandler<in TNotification> where TNotification : INotification
{
    Task Handle(TNotification notification, CancellationToken cancellationToken);
}

public interface IMediator
{
    Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default);
    Task Send(IRequest request, CancellationToken cancellationToken = default);
    Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification;
}

// Unit type for commands that don't return values
public struct Unit
{
    public static readonly Unit Value = new();
}

// High-performance mediator implementation
public sealed class Mediator : IMediator
{
    private readonly IServiceProvider _serviceProvider;
    private static readonly ConcurrentDictionary<Type, Func<IServiceProvider, object, CancellationToken, Task<object>>> _requestHandlers = new();
    private static readonly ConcurrentDictionary<Type, Func<IServiceProvider, object, CancellationToken, Task>[]> _notificationHandlers = new();

    public Mediator(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public async Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        if (request == null) throw new ArgumentNullException(nameof(request));

        var requestType = request.GetType();
        var handler = _requestHandlers.GetOrAdd(requestType, BuildRequestHandler<TResponse>);
        
        var result = await handler(_serviceProvider, request, cancellationToken);
        return (TResponse)result;
    }

    public async Task Send(IRequest request, CancellationToken cancellationToken = default)
    {
        await Send<Unit>(request, cancellationToken);
    }

    public async Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification
    {
        if (notification == null) throw new ArgumentNullException(nameof(notification));

        var notificationType = typeof(TNotification);
        var handlers = _notificationHandlers.GetOrAdd(notificationType, BuildNotificationHandlers<TNotification>);

        var tasks = new Task[handlers.Length];
        for (int i = 0; i < handlers.Length; i++)
        {
            tasks[i] = handlers[i](_serviceProvider, notification, cancellationToken);
        }

        await Task.WhenAll(tasks);
    }

    private static Func<IServiceProvider, object, CancellationToken, Task<object>> BuildRequestHandler<TResponse>(Type requestType)
    {
        var responseType = typeof(TResponse);
        var handlerType = typeof(IRequestHandler<,>).MakeGenericType(requestType, responseType);
        
        return async (serviceProvider, request, cancellationToken) =>
        {
            var handler = serviceProvider.GetRequiredService(handlerType);
            var method = handlerType.GetMethod("Handle")!;
            var result = await (Task<TResponse>)method.Invoke(handler, new[] { request, cancellationToken })!;
            return result!;
        };
    }

    private static Func<IServiceProvider, object, CancellationToken, Task>[] BuildNotificationHandlers<TNotification>(Type notificationType)
    {
        var handlerType = typeof(INotificationHandler<>).MakeGenericType(notificationType);
        var handlers = new List<Func<IServiceProvider, object, CancellationToken, Task>>();

        return new[]
        {
            async (serviceProvider, notification, cancellationToken) =>
            {
                var handlerServices = serviceProvider.GetServices(handlerType);
                var tasks = new List<Task>();
                
                foreach (var handler in handlerServices)
                {
                    var method = handlerType.GetMethod("Handle")!;
                    var task = (Task)method.Invoke(handler, new[] { notification, cancellationToken })!;
                    tasks.Add(task);
                }
                
                await Task.WhenAll(tasks);
            }
        };
    }
}

// Extension methods for DI registration
public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddCustomMediator(this IServiceCollection services, params Assembly[] assemblies)
    {
        services.AddSingleton<IMediator, Mediator>();
        
        var assembliesToScan = assemblies.Length > 0 ? assemblies : new[] { Assembly.GetCallingAssembly() };
        
        foreach (var assembly in assembliesToScan)
        {
            RegisterHandlers(services, assembly);
        }
        
        return services;
    }

    private static void RegisterHandlers(IServiceCollection services, Assembly assembly)
    {
        var types = assembly.GetTypes();
        
        foreach (var type in types)
        {
            if (type.IsAbstract || type.IsInterface) continue;
            
            var interfaces = type.GetInterfaces();
            
            // Register request handlers
            foreach (var iface in interfaces)
            {
                if (iface.IsGenericType)
                {
                    var genericDef = iface.GetGenericTypeDefinition();
                    if (genericDef == typeof(IRequestHandler<,>) || genericDef == typeof(IRequestHandler<>))
                    {
                        services.AddTransient(iface, type);
                    }
                    else if (genericDef == typeof(INotificationHandler<>))
                    {
                        services.AddTransient(iface, type);
                    }
                }
            }
        }
    }
}

// Example usage - Commands (CQRS)
public class CreateUserCommand : IRequest<int>
{
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}

public class CreateUserCommandHandler : IRequestHandler<CreateUserCommand, int>
{
    public async Task<int> Handle(CreateUserCommand request, CancellationToken cancellationToken)
    {
        // Simulate database operation
        await Task.Delay(10, cancellationToken);
        
        // Return user ID
        return Random.Shared.Next(1000, 9999);
    }
}

// Example usage - Queries (CQRS)
public class GetUserQuery : IRequest<UserDto>
{
    public int UserId { get; set; }
}

public class UserDto
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}

public class GetUserQueryHandler : IRequestHandler<GetUserQuery, UserDto>
{
    public async Task<UserDto> Handle(GetUserQuery request, CancellationToken cancellationToken)
    {
        // Simulate database query
        await Task.Delay(5, cancellationToken);
        
        return new UserDto
        {
            Id = request.UserId,
            Name = "John Doe",
            Email = "john.doe@example.com"
        };
    }
}

// Example usage - Command without return value
public class DeleteUserCommand : IRequest
{
    public int UserId { get; set; }
}

public class DeleteUserCommandHandler : IRequestHandler<DeleteUserCommand>
{
    public async Task<Unit> Handle(DeleteUserCommand request, CancellationToken cancellationToken)
    {
        // Simulate database operation
        await Task.Delay(10, cancellationToken);
        
        return Unit.Value;
    }
}

// Example usage - Events/Notifications
public class UserCreatedEvent : INotification
{
    public int UserId { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}

public class EmailNotificationHandler : INotificationHandler<UserCreatedEvent>
{
    public async Task Handle(UserCreatedEvent notification, CancellationToken cancellationToken)
    {
        // Send welcome email
        await Task.Delay(20, cancellationToken);
        Console.WriteLine($"Welcome email sent to {notification.Email}");
    }
}

public class AuditLogHandler : INotificationHandler<UserCreatedEvent>
{
    public async Task Handle(UserCreatedEvent notification, CancellationToken cancellationToken)
    {
        // Log user creation
        await Task.Delay(5, cancellationToken);
        Console.WriteLine($"User {notification.UserId} created - logged to audit");
    }
}

// Example API Controller usage
/*
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    private readonly IMediator _mediator;

    public UsersController(IMediator mediator)
    {
        _mediator = mediator;
    }

    [HttpPost]
    public async Task<IActionResult> CreateUser([FromBody] CreateUserCommand command)
    {
        var userId = await _mediator.Send(command);
        
        // Publish event
        await _mediator.Publish(new UserCreatedEvent 
        { 
            UserId = userId, 
            Name = command.Name, 
            Email = command.Email 
        });
        
        return Ok(new { UserId = userId });
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetUser(int id)
    {
        var user = await _mediator.Send(new GetUserQuery { UserId = id });
        return Ok(user);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteUser(int id)
    {
        await _mediator.Send(new DeleteUserCommand { UserId = id });
        return NoContent();
    }
}
*/

// Program.cs registration example
/*
var builder = WebApplication.CreateBuilder(args);

// Add mediator with automatic handler registration
builder.Services.AddCustomMediator(typeof(Program).Assembly);

// Add other services
builder.Services.AddControllers();

var app = builder.Build();

app.UseRouting();
app.MapControllers();

app.Run();
*/
